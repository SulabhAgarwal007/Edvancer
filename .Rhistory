n.minobsinnode = 20)
model = train(Survived ~ .,
data=df_transformed_train,
method = 'gbm',
trControl = fitControl,
tuneGrid = gbmGrid,
verbose = FALSE
)
model
p = predict(model, df_transformed_test)
confusionMatrix(p, df_transformed_test$Survived)
library(caret)
library(lattice)
library(ggplot2)
library(dplyr)
# load train and test dataset
df_train = data.frame(read.csv('Edvancer Data Science/R Code/datasets/titanic/train.csv', stringsAsFactors = F))
df_test = data.frame(read.csv('Edvancer Data Science/R Code/datasets/titanic/test.csv', stringsAsFactors = F))
df_train$type = "train"
df_test$type ="test"
df_test$Survived = ""
col = sort(names(df_train))
df_combined = rbind(df_train[, col], df_test[, col])
# Looking into the str() Embarked has 2 missing values so lets impute it with Mode
df_combined[which(df_combined$Embarked==""), "Embarked"] = "S"
table(df_combined$Embarked
)
df_combined$Embarked = as.factor(df_combined$Embarked)
df_combined$Sex = as.factor(df_combined$Sex)
# check the structure
str(df_combined)
?replace
df_combined$Cabin_modified = replace(df_combined$Cabin,"", "U")
df_combined$Cabin_modified[which(df_combined$Cabin =="")] = "U"
table(df_combined$Cabin_modified)
df_combined$Cabin[which(df_combined$Cabin =="")] = "U"
table(df_combined$Cabin)
df_combined$Cabin = substr(df_combined$Cabin,1,1)
table(df_combined$Cabin)
library(caret)
library(lattice)
library(ggplot2)
library(dplyr)
# load train and test dataset
df_train = data.frame(read.csv('Edvancer Data Science/R Code/datasets/titanic/train.csv', stringsAsFactors = F))
df_test = data.frame(read.csv('Edvancer Data Science/R Code/datasets/titanic/test.csv', stringsAsFactors = F))
df_train$type = "train"
df_test$type ="test"
df_test$Survived = ""
col = sort(names(df_train))
df_combined = rbind(df_train[, col], df_test[, col])
# Looking into the str() Embarked has 2 missing values so lets impute it with Mode
df_combined[which(df_combined$Embarked==""), "Embarked"] = "S"
table(df_combined$Embarked
)
df_combined$Embarked = as.factor(df_combined$Embarked)
df_combined$Sex = as.factor(df_combined$Sex)
# check the structure
str(df_combined)
# dummy variable creation for factor datatypes
df_combined$abb_name = trimws(substr(df_combined$Name, regexpr("[,]", df_combined$Name)+1,
regexpr("[.]", df_combined$Name)))
df_combined$abb_name[which(df_combined$abb_name %in%
c("Capt.", "Col.","Capt.","Col.","Don.","Major.","Jonkheer.","Rev.","Sir.", "Dr."))]= "Mr."
df_combined$abb_name[which(df_combined$abb_name %in%
c("Lady.","Miss.","Ms.","the Countess.","Mlle.","Mme.","Dona."))] = "Mrs."
df_combined$Cabin[which(df_combined$Cabin =="")] = "U"
df_combined$Cabin = substr(df_combined$Cabin,1,1)
dummy_model = dummyVars(Survived ~ Embarked + Sex + abb_name + Cabin, data = df_combined, sep = ".",
levelsOnly = FALSE,
fullRank = TRUE
)
df_combined = cbind(df_combined, predict(dummy_model, newdata = df_combined))
df_combined$Family = df_combined$Parch + df_combined$SibSp + 1
table(df_combined$Family)
df_combined = select(df_combined, -c("Embarked","Sex","abb_name","Ticket","Cabin","Name","Parch","SibSp"))
str(df_combined)
# remove name
df_train = subset(df_combined, type=="train")
df_test = subset(df_combined, type=="test")
df_train$type = NULL
df_test$type = NULL
df_test$Survived = NULL
df_train$Survived = as.numeric(df_train$Survived)
pp_model = preProcess(df_train[, !(names(df_train) %in% c("Survived"))], method = "knnImpute") # bagImpute
df_transformed = predict(pp_model, newdata = df_train[, !(names(df_train) %in% c("Survived"))])
df_transformed$Survived = as.factor(df_train$Survived)
train_index = createDataPartition(df_transformed$Survived, p= 0.75, list = FALSE)
df_transformed_train = df_transformed[train_index, ]
df_transformed_test = df_transformed[-train_index, ]
fitControl = trainControl(method = "repeatedcv", repeats = 5, number = 10)
gbmGrid <-  expand.grid(interaction.depth = c(1, 5, 9),
n.trees = (1:30)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
model = train(Survived ~ .,
data=df_transformed_train,
method = 'gbm',
trControl = fitControl,
tuneGrid = gbmGrid,
verbose = FALSE
)
model
p = predict(model, df_transformed_test)
confusionMatrix(p, df_transformed_test$Survived)
library(caret)
library(lattice)
library(ggplot2)
library(dplyr)
# load train and test dataset
df_train = data.frame(read.csv('Edvancer Data Science/R Code/datasets/titanic/train.csv', stringsAsFactors = F))
df_test = data.frame(read.csv('Edvancer Data Science/R Code/datasets/titanic/test.csv', stringsAsFactors = F))
df_train$type = "train"
df_test$type ="test"
df_test$Survived = ""
col = sort(names(df_train))
df_combined = rbind(df_train[, col], df_test[, col])
# Looking into the str() Embarked has 2 missing values so lets impute it with Mode
df_combined[which(df_combined$Embarked==""), "Embarked"] = "S"
table(df_combined$Embarked
)
df_combined$Embarked = as.factor(df_combined$Embarked)
df_combined$Sex = as.factor(df_combined$Sex)
# check the structure
str(df_combined)
# dummy variable creation for factor datatypes
df_combined$abb_name = trimws(substr(df_combined$Name, regexpr("[,]", df_combined$Name)+1,
regexpr("[.]", df_combined$Name)))
df_combined$abb_name[which(df_combined$abb_name %in%
c("Capt.", "Col.","Capt.","Col.","Don.","Major.","Jonkheer.","Rev.","Sir.", "Dr."))]= "Mr."
df_combined$abb_name[which(df_combined$abb_name %in%
c("Lady.","Miss.","Ms.","the Countess.","Mlle.","Mme.","Dona."))] = "Mrs."
df_combined$Cabin[which(df_combined$Cabin =="")] = "U"
df_combined$Cabin = substr(df_combined$Cabin,1,1)
dummy_model = dummyVars(Survived ~ Embarked + Sex + abb_name + Cabin, data = df_combined, sep = ".",
levelsOnly = FALSE,
fullRank = TRUE
)
df_combined = cbind(df_combined, predict(dummy_model, newdata = df_combined))
df_combined$Family = df_combined$Parch + df_combined$SibSp + 1
df_combined = select(df_combined, -c("Embarked","Sex","abb_name","Ticket","Cabin","Name","Parch","SibSp"))
str(df_combined)
# remove name
df_train = subset(df_combined, type=="train")
df_test = subset(df_combined, type=="test")
df_train$type = NULL
df_test$type = NULL
df_test$Survived = NULL
df_train$Survived = as.numeric(df_train$Survived)
pp_model = preProcess(df_train[, !(names(df_train) %in% c("Survived"))], method = "knnImpute") # bagImpute
df_transformed = predict(pp_model, newdata = df_train[, !(names(df_train) %in% c("Survived"))])
df_transformed$Survived = as.factor(df_train$Survived)
train_index = createDataPartition(df_transformed$Survived, p= 0.75, list = FALSE)
df_transformed_train = df_transformed[train_index, ]
df_transformed_test = df_transformed[-train_index, ]
fitControl = trainControl(method = "repeatedcv", repeats = 5, number = 10)
gbmGrid <-  expand.grid(interaction.depth = c(1, 5, 9),
n.trees = (1:30)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
model = train(Survived ~ .,
data=df_transformed_train,
method = 'treebag',
trControl = fitControl,
# tuneGrid = gbmGrid,
verbose = FALSE
)
model
p = predict(model, df_transformed_test)
confusionMatrix(p, df_transformed_test$Survived)
gbmGrid
install.packages("doParallel")
library(doParallel)
library(caret)
library(lattice)
library(ggplot2)
library(dplyr)
library(doParallel)
registerDoParallel(makePSOCKcluster(3))
# load train and test dataset
df_train = data.frame(read.csv('Edvancer Data Science/R Code/datasets/titanic/train.csv', stringsAsFactors = F))
df_test = data.frame(read.csv('Edvancer Data Science/R Code/datasets/titanic/test.csv', stringsAsFactors = F))
df_train$type = "train"
df_test$type ="test"
df_test$Survived = ""
col = sort(names(df_train))
df_combined = rbind(df_train[, col], df_test[, col])
# Looking into the str() Embarked has 2 missing values so lets impute it with Mode
df_combined[which(df_combined$Embarked==""), "Embarked"] = "S"
table(df_combined$Embarked
)
df_combined$Embarked = as.factor(df_combined$Embarked)
df_combined$Sex = as.factor(df_combined$Sex)
# check the structure
str(df_combined)
# dummy variable creation for factor datatypes
df_combined$abb_name = trimws(substr(df_combined$Name, regexpr("[,]", df_combined$Name)+1,
regexpr("[.]", df_combined$Name)))
df_combined$abb_name[which(df_combined$abb_name %in%
c("Capt.", "Col.","Capt.","Col.","Don.","Major.","Jonkheer.","Rev.","Sir.", "Dr."))]= "Mr."
df_combined$abb_name[which(df_combined$abb_name %in%
c("Lady.","Miss.","Ms.","the Countess.","Mlle.","Mme.","Dona."))] = "Mrs."
df_combined$Cabin[which(df_combined$Cabin =="")] = "U"
df_combined$Cabin = substr(df_combined$Cabin,1,1)
dummy_model = dummyVars(Survived ~ Embarked + Sex + abb_name + Cabin, data = df_combined, sep = ".",
levelsOnly = FALSE,
fullRank = TRUE
)
df_combined = cbind(df_combined, predict(dummy_model, newdata = df_combined))
df_combined$Family = df_combined$Parch + df_combined$SibSp + 1
df_combined = select(df_combined, -c("Embarked","Sex","abb_name","Ticket","Cabin","Name","Parch","SibSp"))
str(df_combined)
# remove name
df_train = subset(df_combined, type=="train")
df_test = subset(df_combined, type=="test")
df_train$type = NULL
df_test$type = NULL
df_test$Survived = NULL
df_train$Survived = as.numeric(df_train$Survived)
pp_model = preProcess(df_train[, !(names(df_train) %in% c("Survived"))], method = "knnImpute") # bagImpute
df_transformed = predict(pp_model, newdata = df_train[, !(names(df_train) %in% c("Survived"))])
df_transformed$Survived = as.factor(df_train$Survived)
train_index = createDataPartition(df_transformed$Survived, p= 0.75, list = FALSE)
df_transformed_train = df_transformed[train_index, ]
df_transformed_test = df_transformed[-train_index, ]
fitControl = trainControl(method = "repeatedcv", repeats = 5, number = 10)
gbmGrid <-  expand.grid(interaction.depth = c(1, 5, 9),
n.trees = (1:30)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
model = train(Survived ~ .,
data=df_transformed_train,
method = 'gbm', # treebag
trControl = fitControl,
tuneGrid = gbmGrid,
verbose = FALSE
)
model
p = predict(model, df_transformed_test)
confusionMatrix(p, df_transformed_test$Survived)
library(caret)
library(lattice)
library(ggplot2)
library(dplyr)
library(doParallel)
registerDoParallel(makePSOCKcluster(3))
# load train and test dataset
df_train = data.frame(read.csv('Edvancer Data Science/R Code/datasets/titanic/train.csv', stringsAsFactors = F))
df_test = data.frame(read.csv('Edvancer Data Science/R Code/datasets/titanic/test.csv', stringsAsFactors = F))
df_train$type = "train"
df_test$type ="test"
df_test$Survived = ""
col = sort(names(df_train))
df_combined = rbind(df_train[, col], df_test[, col])
# Looking into the str() Embarked has 2 missing values so lets impute it with Mode
df_combined[which(df_combined$Embarked==""), "Embarked"] = "S"
table(df_combined$Embarked
)
df_combined$Embarked = as.factor(df_combined$Embarked)
df_combined$Sex = as.factor(df_combined$Sex)
# check the structure
str(df_combined)
# dummy variable creation for factor datatypes
df_combined$abb_name = trimws(substr(df_combined$Name, regexpr("[,]", df_combined$Name)+1,
regexpr("[.]", df_combined$Name)))
df_combined$abb_name[which(df_combined$abb_name %in%
c("Capt.", "Col.","Capt.","Col.","Don.","Major.","Jonkheer.","Rev.","Sir.", "Dr."))]= "Mr."
df_combined$abb_name[which(df_combined$abb_name %in%
c("Lady.","Miss.","Ms.","the Countess.","Mlle.","Mme.","Dona."))] = "Mrs."
df_combined$Cabin[which(df_combined$Cabin =="")] = "U"
df_combined$Cabin = substr(df_combined$Cabin,1,1)
dummy_model = dummyVars(Survived ~ Embarked + Sex + abb_name + Cabin, data = df_combined, sep = ".",
levelsOnly = FALSE,
fullRank = TRUE
)
df_combined = cbind(df_combined, predict(dummy_model, newdata = df_combined))
df_combined$Family = df_combined$Parch + df_combined$SibSp + 1
df_combined = select(df_combined, -c("Embarked","Sex","abb_name","Ticket","Cabin","Name","Parch","SibSp"))
str(df_combined)
# remove name
df_train = subset(df_combined, type=="train")
df_test = subset(df_combined, type=="test")
df_train$type = NULL
df_test$type = NULL
df_test$Survived = NULL
df_train$Survived = as.numeric(df_train$Survived)
pp_model = preProcess(df_train[, !(names(df_train) %in% c("Survived"))], method = "knnImpute") # bagImpute
df_transformed = predict(pp_model, newdata = df_train[, !(names(df_train) %in% c("Survived"))])
df_transformed$Survived = as.factor(df_train$Survived)
train_index = createDataPartition(df_transformed$Survived, p= 0.75, list = FALSE)
df_transformed_train = df_transformed[train_index, ]
df_transformed_test = df_transformed[-train_index, ]
fitControl = trainControl(method = "repeatedcv", repeats = 5, number = 10)
gbmGrid <-  expand.grid(interaction.depth = c(1, 5, 9),
n.trees = (1:30)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
model = train(Survived ~ .,
data=df_transformed_train,
method = 'rf', # treebag, gbm
trControl = fitControl,
# tuneGrid = gbmGrid,
verbose = FALSE
)
model
p = predict(model, df_transformed_test)
confusionMatrix(p, df_transformed_test$Survived)
setwd("C:/Users/Sulabh/Documents/Edvancer Data Science/R Code/Assignment_Retail")
train_df = read.csv("store_train.csv")
test_df = read.csv("store_test.csv")
library(dplyr)
glimpse(train_df)
train_df = read.csv("store_train.csv", stringsAsFactors = FALSE)
test_df = read.csv("store_test.csv", stringsAsFactors = F)
glimpse(train_df)
View(train_df)
names(train_df)
for col in names(train_df){
sum(is.null(train_df[, col]))
}
for col in names(train_df)
sum(is.null(train_df[, col]))
for(col in names(train_df)){
sum(is.null(train_df[, col]))
}
for(col in names(train_df)){
print(col, sum(is.null(train_df[, col])))
}
summary(train_df)
for(col in names(train_df)){
print(col, sum(is.na(train_df[, col])))
}
print(sum(is.na(train_df[, col])))
for(col in names(train_df)){
print(sum(train_df[, col]==""))
}
print(is.null(sum(train_df[, col])))
for(col in names(train_df)){
print(is.null(sum(train_df[, col])))
}
for(col in names(train_df)){
print(sum(is.null(train_df[, col])))
}
# To check for Nulls
for(col in names(test_df)){
print(sum(is.null(test_df[, col])))
}
table(train_df$Areaname)
# unique counts
for(col in names(train_df)){
print(col)
print(length(unique(is.null(train_df[, col]))))
}
# unique counts
for(col in names(train_df)){
print(col)
print(length(unique(train_df[, col])))
}
library(dplyr)
setwd("C:/Users/Sulabh/Documents/Edvancer Data Science/R Code/AnalyticsVidhya_Big_Mart_Problem")
train_df = read.csv("Train_UWu5bXk.csv", stringsAsFactors = FALSE)
test_df = read.csv("Test_u94Q5KV.csv", stringsAsFactors = F)
glimpse(train_df)
head(train_df)
View(train_df)
typeof(train_df$Outlet_Identifier)
v_col = which(typeof(names(train_df)])=="character")
v_col = which(typeof(train_df[,names(train_df)])=="character")
typeof(train_df[,names(train_df)])=="character"
(train_df[,names(train_df)])
typeof(train_df[,names(train_df)])
typeof(train_df$names(train_df))
v_col = list()
for(c in names(train_df)){
v_col = v_col.append(which(typeof(train_df$c)=="character"))
}
for(c in names(train_df)){
v_col = (which(typeof(train_df$c)=="character"))
}
for(c in names(train_df)){
if(typeof(train_df$c)=="character")){
v_col = c
}
}
for(c in names(train_df)){
if(typeof(train_df$c)=="character")){
v_col = c
}
}
for(c in names(train_df)){
if(typeof(train_df$c)=="character"){
v_col = c
}
}
for(c in names(train_df)){
if(typeof(train_df$c)=="character"){
v_col = append(c)
}
}
for(c in names(train_df)){
if(typeof(train_df$c)=="character"){
print(c)
v_col = append(c)
}
}
for(c in names(train_df)){
typeof(train_df$c)
if(typeof(train_df$c)=="character"){
print(c)
v_col = append(c)
}
}
for(c in names(train_df)){
print(typeof(train_df$c))
if(typeof(train_df$c)=="character"){
print(c)
v_col = append(c)
}
}
for(c in names(train_df)){
print(typeof(train_df[,c]))
if(typeof(train_df$c)=="character"){
print(c)
v_col = append(c)
}
}
?append
for(c in names(train_df)){
print(typeof(train_df[,c]))
if(typeof(train_df$c)=="character"){
print(c)
v_col = append(v_col, c)
}
}
append(1:5, 0:1, after = 3)
for(c in names(train_df)){
print(typeof(train_df[,c]))
if(typeof(train_df$c)=="character"){
print(c)
v_col = append(v_col, c, after=length(v_col))
}
}
typeof(names(train_df))
names(train_df)
v_col = NULL
for(c in names(train_df)){
print(typeof(train_df[,c]))
if(typeof(train_df$c)=="character"){
print(c)
v_col = append(v_col, c, after=length(v_col))
}
}
for(c in names(train_df)){
print(typeof(train_df[,c]))
if(typeof(train_df[,c])=="character"){
print(c)
v_col = append(v_col, c, after=length(v_col))
}
}
for(c in v_col){
table(train[,c])
}
for(c in v_col){
table(train_df[,c])
}
for(c in v_col){
print(table(train_df[,c]))
}
for(c in v_col){
if(c<>"Item_Identifier")
print(c, table(train_df[,c]))
}
for(c in v_col){
if(c<>"Item_Identifier"){
print(c, table(train_df[,c]))
}
}
for(c in v_col){
if(c != "Item_Identifier"){
print(c, table(train_df[,c]))
}
}
for(c in v_col){
if(c != "Item_Identifier"){
print(c)
print(table(train_df[,c]))
}
}
library(caret)
glimpse(train_df)
?remove
pp_model = preProcess(train_df[, !v_col %in% c("Item_Identifier")], method = "bagImpute")
modified_data = predict(pp_model, newdata = train_df)
pp_model
library(dplyr)
setwd("C:/Users/Sulabh/Documents/Edvancer Data Science/R Code/Assignment_Retail")
train_df = read.csv("store_train.csv", stringsAsFactors = FALSE)
test_df = read.csv("store_test.csv", stringsAsFactors = F)
glimpse(train_df)
View(train_df)
train_df.dtype
View(train_df)
# To check for Nulls
for(col in names(train_df)){
print(sum(is.null(train_df[, col])))
}
# unique counts
for(col in names(train_df)){
print(col)
print(length(unique(train_df[, col])))
}
str(train_df)
